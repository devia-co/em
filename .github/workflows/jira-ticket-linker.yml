name: Jira Ticket Linker

on:
  pull_request:
    types: [opened, reopened, edited, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  update-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub requests

      - name: Extract and update Jira tickets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_ACTION_TOKEN }}
        run: |
          python - <<EOF
          import re
          import os
          import requests
          from github import Github

          def extract_jira_tickets(text):
              tickets = re.findall(r'SCRUM-\d+', text)
              print(f"Debug: Extracted tickets: {tickets}")
              return tickets

          def get_jira_ticket_info(ticket):
              url = f"{os.environ['JIRA_BASE_URL']}/rest/api/3/issue/{ticket}"
              auth = (os.environ['JIRA_USER_EMAIL'], os.environ['JIRA_API_TOKEN'])
              try:
                  response = requests.get(url, auth=auth)
                  response.raise_for_status()
                  data = response.json()
                  title = data['fields']['summary']
                  print(f"Debug: Retrieved title for {ticket}: {title}")
                  return title
              except Exception as e:
                  print(f"Error fetching info for {ticket}: {str(e)}")
                  return "N/A"

          def create_jira_section(tickets):
              if not tickets:
                  return ""
              section = "Jira issues linked:\n\n"
              for ticket in tickets:
                  title = get_jira_ticket_info(ticket)
                  if title != "N/A":
                      section += f"* [{ticket}]({os.environ['JIRA_BASE_URL']}/browse/{ticket}) {title}\n"
                  else:
                      section += f"* {ticket} N/A\n"
              return section.strip()

          def update_pr_body(original_body, new_jira_section):
              # Remove existing Jira section
              body_without_jira = re.sub(r'Jira issues linked:\n\n.*?\n---\n', '', original_body, flags=re.DOTALL)
              # Add new Jira section
              delimiter = "\n---\n"
              return f"{new_jira_section}{delimiter}{body_without_jira}".strip()

          g = Github(os.environ['GITHUB_TOKEN'])
          repo = g.get_repo(os.environ['REPO'])
          pr = repo.get_pull(int(os.environ['PR_NUMBER']))

          # Extract tickets from PR title, branch name, and commit messages
          tickets = set()
          tickets.update(extract_jira_tickets(pr.title))
          tickets.update(extract_jira_tickets(pr.head.ref))
          for commit in pr.get_commits():
              tickets
